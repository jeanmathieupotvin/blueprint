% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Blueprint.R
\name{Blueprint}
\alias{Blueprint}
\alias{new_blueprint}
\alias{is_blueprint}
\title{The Blueprint (root) super-class}
\usage{
## Constructor function
new_blueprint()

## Test if an object is a 'Blueprint' object
is_blueprint(x)
}
\arguments{
\item{x}{any \R object.}
}
\value{
Constructor function \code{\link[=new_blueprint]{new_blueprint()}} is a wrapper to
\code{\link[=Blueprint]{$new()}} and returns a \link[R6:R6Class]{R6} object of
class \link{Blueprint}.

External helper functions \code{\link[=is_blueprint]{is_blueprint()}} returns a logical scalar.
}
\description{
\link{Blueprint} is the root super-class of all \link[R6:R6Class]{R6} classes of package
\pkg{blueprint}. In other words, all classes defined in package
\pkg{blueprint} inherit class \link{Blueprint}. This class is \strong{definitely not
useful to the user} and is mostly used has a safeguard against probable
class names collisions.

You should consider it as a virtual class.
}
\seealso{
Other Blueprint classes: 
\code{\link{Fields}},
\code{\link{Field}}
}
\author{
Jean-Mathieu Potvin (\href{mailto:jean-mathieu_potvin@cooperators.ca}{jean-mathieu_potvin@cooperators.ca})
}
\concept{Blueprint classes}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{is_blueprint}}{A scalar logical always equal to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{blueprint_version}}{A scalar character that holds the
\pkg{blueprint} package's version when an object is created.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Blueprint$new()}}
\item \href{#method-validate}{\code{Blueprint$validate()}}
\item \href{#method-print}{\code{Blueprint$print()}}
\item \href{#method-format}{\code{Blueprint$format()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \link{Blueprint} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Blueprint$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \link[R6:R6Class]{R6} object of class \link{Blueprint}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate"></a>}}
\if{latex}{\out{\hypertarget{method-validate}{}}}
\subsection{Method \code{validate()}}{
Validate a \link{Blueprint} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Blueprint$validate()}\if{html}{\out{</div>}}
}

\subsection{Details}{
A \link{Blueprint} instance is valid if \verb{$is_blueprint} is
\code{TRUE}.
}

\subsection{Returns}{
The \link{Blueprint} object invisibly if the object is valid.
Else, an error explaining what is wrong with the object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print a \link{Blueprint} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Blueprint$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The \link{Blueprint} object invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
Format a \link{Blueprint} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Blueprint$format()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character scalar representing the formatted
\link{Blueprint} object.
}
}
}
