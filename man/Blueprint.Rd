% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Blueprint.R
\name{Blueprint}
\alias{Blueprint}
\alias{is_blueprint}
\alias{valid_blueprint}
\title{The Blueprint (root) super-class}
\usage{
## Test if an object is a 'Blueprint' object
is_blueprint(x)

## Validate if an object is a proper 'Blueprint' object
valid_blueprint(x)
}
\arguments{
\item{x}{any \R object.}
}
\value{
\itemize{
\item External helper function \code{\link[=is_blueprint]{is_blueprint()}} returns a logical scalar.
}

\itemize{
\item External helper function \code{\link[=valid_blueprint]{valid_blueprint()}} returns a logical scalar if
the object is valid. Else, an error explaining what is wrong is returned.
}
}
\description{
\link{Blueprint} is the root super-class of all \link[R6:R6Class]{R6} classes of package
\pkg{blueprint}. In other words, all classes defined in package
\pkg{blueprint} inherit class \link{Blueprint}.

This class is \strong{definitely not useful for typical users}. You should
consider it as a virtual class.
}
\seealso{
Other Blueprint classes: 
\code{\link{Atomic}}
}
\author{
Jean-Mathieu Potvin (\href{mailto:jm@potvin.xyz}{jm@potvin.xyz})
}
\concept{Blueprint classes}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{is_blueprint}}{A scalar logical always equal to \code{TRUE}.}

\item{\code{blueprint_version}}{A scalar character that registers
\pkg{blueprint}'s version at the moment the object is created.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Blueprint$new()}}
\item \href{#method-validate}{\code{Blueprint$validate()}}
\item \href{#method-print}{\code{Blueprint$print()}}
\item \href{#method-format}{\code{Blueprint$format()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \link{Blueprint} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Blueprint$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \link[R6:R6Class]{R6} object of class \link{Blueprint}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate"></a>}}
\if{latex}{\out{\hypertarget{method-validate}{}}}
\subsection{Method \code{validate()}}{
Validate a \link{Blueprint} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Blueprint$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The \link{Blueprint} object invisibly if the object is valid.
Else, an error explaining what is wrong with the object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print a \link{Blueprint} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Blueprint$print(.validate = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.validate}}{A scalar logical. Validate the object before calling
the method? This argument is \code{TRUE} by default. While it is available
to the users, it should be ignored, unless you have an alternative way
to make sure your underlying object is valid.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \link{Blueprint} object invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
Format a \link{Blueprint} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Blueprint$format(.validate = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.validate}}{A scalar logical. Validate the object before calling
the method? This argument is \code{TRUE} by default. While it is available
to the users, it should be ignored, unless you have an alternative way
to make sure your underlying object is valid.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character scalar representing the formatted
\link{Blueprint} object.
}
}
}
