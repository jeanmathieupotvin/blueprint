% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Atomic.R
\name{Atomic}
\alias{Atomic}
\alias{is_atomic}
\alias{valid_atomic}
\title{Atomic class}
\usage{
## Test if an object is an 'Atomic' object
is_atomic(x)

## Validate if an object is a proper 'Atomic' object
valid_atomic(x)
}
\arguments{
\item{x}{any \R object.}
}
\value{
External helper functions \code{\link[=is_atomic]{is_atomic()}} and
\code{\link[=valid_atomic]{valid_atomic()}} return a logical scalar.
}
\description{
\link{Atomic} is a simple class that holds useful metadata on
\R atomic vectors (usually, objects that can be inserted into
\code{\link[base:data.frame]{data.frame}} objects). An instance of class
\link{Atomic} registers the vector's underlying class and name.
Behind the scenes, it also records all its super-classes and its
prototype, which is set equal to \code{atomic[1L]} (see arguments below to
learn what \code{atomic} means).
}
\section{Self-validation}{

The contents of a \link{Atomic} object is checked each time a method
(including \code{\link[=Atomic]{$new()}}). The performance loss is negligible
and favored over errors introduced by a \emph{broken} \link{Atomic} instance.
}

\seealso{
Other Blueprint classes: 
\code{\link{Blueprint}}
}
\author{
Jean-Mathieu Potvin (\href{mailto:jm@potvin.xyz}{jm@potvin.xyz})
}
\concept{Blueprint classes}
\section{Super class}{
\code{\link[blueprint:Blueprint]{blueprint::Blueprint}} -> \code{Atomic}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{A scalar character. A name for the vector.}

\item{\code{type}}{A scalar character. The class of the vector.}

\item{\code{length}}{A scalar integer. The length of the vector.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Atomic$new()}}
\item \href{#method-validate}{\code{Atomic$validate()}}
\item \href{#method-print}{\code{Atomic$print()}}
\item \href{#method-format}{\code{Atomic$format()}}
\item \href{#method-compare}{\code{Atomic$compare()}}
\item \href{#method-as_list}{\code{Atomic$as_list()}}
\item \href{#method-as_character}{\code{Atomic$as_character()}}
\item \href{#method-as_yaml}{\code{Atomic$as_yaml()}}
\item \href{#method-as_json}{\code{Atomic$as_json()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \link{Atomic} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Atomic$new(atomic, name, length = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{atomic}}{any strict atomic \R vector.
See \code{\link[=is_strict_atomic]{is_strict_atomic()}} for more information.}

\item{\code{name}}{A scalar character. The name of the vector passed
to \code{atomic}.}

\item{\code{length}}{A scalar integer. This argument is flexible. If
\code{NULL}, \code{length} is ignored and not enforced.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \link[R6:R6Class]{R6} object of class \link{Atomic}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate"></a>}}
\if{latex}{\out{\hypertarget{method-validate}{}}}
\subsection{Method \code{validate()}}{
Validate a \link{Atomic} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Atomic$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The \link{Atomic} object invisibly if the object is
valid. Else, an error explaining what is wrong with the object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print a \link{Atomic} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Atomic$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The \link{Atomic} object invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
Format a \link{Atomic} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Atomic$format(validate = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{validate}}{A scalar logical. Validate the object before calling
the method? This argument is \code{TRUE} by default.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character scalar representing the formatted
\link{Atomic} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compare"></a>}}
\if{latex}{\out{\hypertarget{method-compare}{}}}
\subsection{Method \code{compare()}}{
Compare a vector against an \link{Atomic}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Atomic$compare(object, validate = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object}}{Any \link{atomic} \R object.}

\item{\code{validate}}{A scalar logical. Validate the object before calling
the method? This argument is \code{TRUE} by default.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A scalar logical. A \code{TRUE} means that \code{object} is in
compliance with the underlying \link{Atomic}:
\enumerate{
\item it has the same \verb{$type} and
\item if \verb{$length} is \strong{not} \code{NULL}, it has the same prescribed length.
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_list"></a>}}
\if{latex}{\out{\hypertarget{method-as_list}{}}}
\subsection{Method \code{as_list()}}{
Coerce a \link{Atomic} object into a list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Atomic$as_list(validate = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{validate}}{A scalar logical. Validate the object before calling
the method? This argument is \code{TRUE} by default.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A named list of three elements:
\tabular{ll}{
\code{name}      \tab A scalar character equal to \verb{$name}.\cr
\code{type}      \tab A scalar character equal to \verb{$type}.\cr
\code{length}    \tab A scalar integer equal to \verb{$length}.\cr
\code{prototype} \tab A scalar \link[=is_strict_atomic]{strict atomic} value with a class attribute equal to \verb{$type}.
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_character"></a>}}
\if{latex}{\out{\hypertarget{method-as_character}{}}}
\subsection{Method \code{as_character()}}{
Coerce a \link{Atomic} object into a character.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Atomic$as_character(validate = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{validate}}{A scalar logical. Validate the object before calling
the method? This argument is \code{TRUE} by default.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A named character of three elements:
\tabular{ll}{
\code{name}   \tab A scalar character equal to \verb{$name}.\cr
\code{type}   \tab A scalar character equal to \verb{$type}.\cr
\code{length} \tab A scalar character equal to the coerced value of \verb{$length} (from integer to character).
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_yaml"></a>}}
\if{latex}{\out{\hypertarget{method-as_yaml}{}}}
\subsection{Method \code{as_yaml()}}{
Convert a \link{Atomic} object to a YAML text
based format.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Atomic$as_yaml(validate = TRUE, file, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{validate}}{A scalar logical. Validate the object before calling
the method? This argument is \code{TRUE} by default.}

\item{\code{file}}{A scalar character. The name of a file to be created.}

\item{\code{...}}{further arguments passed to \code{\link[yaml:as.yaml]{yaml::as.yaml()}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
YAML is a human friendly data serialization standard for all
programming languages. The acronym stands for \emph{YAML Ain't Markup
Language} (it is a \emph{recursive} name). It is also designed to be a
strict super-set of JSON (see \code{\link[=Atomic]{$as_json()}}).
To learn more, visit \href{https://yaml.org/}{yaml.org}.

Method \code{\link[=Atomic]{$as_list()}} re-encodes its fields to
UTF-8 (if applicable) before returning or writing the YAML output.
}

\subsection{Returns}{
A scalar character holding a YAML string derived from
method \code{\link[=Atomic]{$as_list()}}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_json"></a>}}
\if{latex}{\out{\hypertarget{method-as_json}{}}}
\subsection{Method \code{as_json()}}{
Convert a \link{Atomic} object to a JSON text
based format.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Atomic$as_json(validate = TRUE, file, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{validate}}{A scalar logical. Validate the object before calling
the method? This argument is \code{TRUE} by default.}

\item{\code{file}}{A scalar character. The name of a file to be created.}

\item{\code{...}}{further arguments passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
JSON.
}

\subsection{Returns}{
A scalar character holding a JSON string derived from
method \code{\link[=Atomic]{$as_list()}}. Technically, the output
is encapsulated into an object of class \code{json}. This class is
internally defined in package \pkg{jsonlite} and behave like a
normal character.
}
}
}
